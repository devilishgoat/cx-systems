{"version":3,"sources":["components/navigation/index.tsx","components/navigation/navigation.tsx","routes/index.tsx","routes/home/home.tsx","routes/tech/Tech.tsx","routes/clients/Clients.tsx","routes/contact/Contact.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Routes","path","component","exact","App","Container","Row","map","r","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQACeA,ECGsB,WACjC,OAAO,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACnC,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,cACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,WACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,aAAf,YACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,aAAf,kB,OCHOQ,EAAkB,CAC3B,CACIC,KAAO,IACPC,UCZwB,WAC5B,OAAO,qCDYHC,OAAO,GAEX,CACIF,KAAO,QACPC,UEjBuB,WAC3B,OAAO,qCFiBHC,OAAO,GAEX,CACIF,KAAO,WACPC,UGtB0B,WAC9B,OAAO,wCHsBHC,OAAO,GAEX,CACIF,KAAO,WACPC,UI3B0B,WAC9B,OAAO,wCJ2BHC,OAAO,I,gBKNAC,MAjBf,WACE,OACE,yBAAKN,UAAU,OACb,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,4BAAQR,UAAU,cAChB,kBAAC,EAAD,QAGDE,EAAOO,KAAI,SAAAC,GACV,OAAO,kBAAC,IAAD,CAAOL,MAAOK,EAAEL,MAAOF,KAAMO,EAAEP,KAAMC,UAAWM,EAAEN,kBCLjDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDgItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75394c2c.chunk.js","sourcesContent":["import {Navigation} from './navigation'\nexport default Navigation","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport {Navbar, Nav} from 'react-bootstrap'\n\nexport const Navigation: React.SFC = () => {\n    return <Navbar bg=\"light\" expand=\"lg\">\n  <Navbar.Brand href=\"#home\">CX Systems</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"/home\">Home</Nav.Link>\n      <Nav.Link href=\"/clients\">Clients</Nav.Link>      \n      <Nav.Link href=\"/tech\">Tech</Nav.Link>      \n      <Nav.Link href=\"/approach\">Approach</Nav.Link>      \n      <Nav.Link href=\"/approach\">Contact us</Nav.Link>      \n    </Nav>\n  </Navbar.Collapse>\n</Navbar>\n}","import React from 'react'\nimport Home from './home'\nimport Tech from './tech'\nimport Clients from './clients'\nimport Contact from './contact'\ntype route = {\n    path: string;\n    component: React.SFC;\n    exact?: boolean;\n}\n\nexport const Routes: route[] = [\n    {\n        path : '/', \n        component: Home,\n        exact: true,\n    },\n    {\n        path : '/tech', \n        component: Tech,\n        exact: true,\n    },\n    {\n        path : '/clients', \n        component: Clients,\n        exact: true,\n    },\n    {\n        path : '/contact', \n        component: Contact,\n        exact: true,\n    },\n]","import React from 'react'\n\nexport const Home : React.SFC = () => {\n    return <h1>Home</h1>\n}","import React from 'react'\n\nexport const Tech: React.SFC = () => {\n    return <h1>Tech</h1>\n}","import React from 'react'\n\nexport const Clients: React.SFC = () => {\n    return <h1>Clients</h1>\n}","import React from 'react'\n\nexport const Contact: React.SFC = () => {\n    return <h1>Contact</h1>\n}","import React from 'react';\nimport './App.css';\nimport Navigation from './components/navigation'\nimport { Route } from 'react-router-dom';\nimport { Routes } from './routes'\nimport {Container, Row} from 'react-bootstrap'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Container>\n        <Row>\n          <header className=\"app-header\">\n            <Navigation />\n          </header>\n        </Row>\n          {Routes.map(r => {\n            return <Route exact={r.exact} path={r.path} component={r.component} />\n          })}      \n        </Container>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}